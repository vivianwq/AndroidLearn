apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'walle'
apply plugin: 'com.atom.resourceflavors' //应用插件
apply from: 'flavors.gradle'

def config = rootProject.ext

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.wq.andoidlearning"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 2
        versionName "1.1"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        sign {
            storeFile file("keystore/sign-debug.jks")
            storePassword "hnnmy2019"
            keyAlias "key0"
            keyPassword "hnnmy2019"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sign
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.sign

            applicationIdSuffix 'debug'
        }
    }


}

rfp{
    resourceDir 'defindpic'
    appName 'app'
}
walle {
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}-${flavorName}.apk'
    //configFile与channelFile两者必须存在一个，否则无法生成渠道包。两者都存在时优先执行configFile
//    channelFile = new File("${project.getProjectDir()}/channel")
    //configFile = new File("${project.getProjectDir()}/config.json")
    // 渠道&额外信息配置文件，与channelFile互斥
    configFile = new File("${project.getProjectDir()}/config.json")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.android.support:design:29.+'
    implementation 'com.ashokvarma.android:bottom-navigation-bar:2.0.5'

    implementation config.dependencies["dagger"]
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor config.dependencies["dagger-compiler"]

    implementation config.dependencies["retrofit"]
    implementation config.dependencies["retroft-converter"]
    implementation config.dependencies["retrofit-adapter"]

    implementation config.dependencies['rxJava']
    implementation config.dependencies['rxAndroid']

    implementation config.dependencies["arouter"]
    implementation project(":lib_base")
    if (isNeedHomeModule.toBoolean()) {
        implementation project(":module_home")
    }
    if (isNeedOtherModule.toBoolean()) {
        implementation project(":module_other")
    }
    if (isNeedStoreModule.toBoolean()) {
        implementation project(":module_store")
    }

    implementation('com.alibaba.android:vlayout:1.2.8@aar') {
        transitive = true
        exclude module: 'support-v4'
    }
    implementation 'com.github.bumptech.glide:glide:4.6.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.6.1'
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation project(':apt')
    implementation project(':YCRefreshViewLib')
    implementation 'cn.yc:YCBannerLib:1.4.0'
    implementation project(':inject_api')
    //gradle3.0以上apt的实现方式
    annotationProcessor project(':processor')
    //快速生成.java文件的库
    implementation 'com.squareup:javapoet:1.8.0'

    implementation 'com.squareup.leakcanary:leakcanary-android:2.2'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.airbnb.android:lottie:3.4.0'
    implementation 'com.meituan.android.walle:library:1.1.6'
}
repositories {
    mavenCentral()
}
